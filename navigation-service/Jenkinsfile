def isBranchBuild = env.IS_BRANCH_BUILD?.toBoolean()
def pushImage = env.PUSH_IMAGE?.toBoolean()
def skipSonar = env.SKIP_SONAR?.toBoolean()

def shouldPublishPacts = !isBranchBuild
def shouldRunSonar = !skipSonar
def shouldDeploy = !isBranchBuild
def shouldPushImage = pushImage || shouldDeploy
def shouldPrefixArtifacts = isBranchBuild
def shouldTagSilver = !isBranchBuild
def shouldRunPerformanceTests = shouldDeploy

final red = '#FF0000'
final searchNavChannel = "nmo_search_navigation"
final slackMsgPipelineLink = "<${env.JOB_URL}|navigation-service master pipeline>"
final slackMsgConsoleLink = "<${env.BUILD_URL}console|Console Output>"

def add_image_prefix = { tag ->
    if (shouldPrefixArtifacts) {
        def job_prefix = 'navigation-service-'
        def name_prefix = env.JOB_NAME.replaceAll("^${job_prefix}", '')
        return "${name_prefix}-${tag}"
    }
    return tag
}

def image_name = add_image_prefix(env.BUILD_NUMBER)

def login_to_aws = {
    login_command = sh(script: 'aws ecr get-login --no-include-email', returnStdout: true).trim()
    sh(login_command)
}

def tag_and_push_docker_image_to_ECR = { tag_name ->
    def tag_name_with_prefix = add_image_prefix(tag_name)
    login_to_aws()
    sh "./gradlew dockerTagAndPush -Pimage.name=${image_name} -Ptag.name=${tag_name_with_prefix}"
}

def deploy(env_name, isFastDeploy, image_tag) {
    stage("Deploy to ${env_name}") {
         build(job: "sixthday-service-deployment-new-infrastructure-${env_name}", parameters: [
             [$class: 'StringParameterValue', name: 'image_tag', value: "${image_tag}"],
             [$class: 'StringParameterValue', name: 'environment', value: "${env_name}"],
             [$class: 'StringParameterValue', name: 'service_name', value: 'navigation'],
             [$class: 'StringParameterValue', name: 'image_repo', value: 'navigation-service'],
             [$class: 'BooleanParameterValue', name: 'fast_drain', value: isFastDeploy]
         ])
    }
}

@NonCPS
def update_jira_fix_version() {
        sh "git log --format=oneline -n 1 | awk 'match(\$0, /[A-Z]+-[0-9]+/) { print substr(\$0, RSTART, RLENGTH) }' > COMMIT_MSG"
        def git_commit = readFile('COMMIT_MSG').trim()
        def fixVersion = getFixVersion()
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId: 'JIRA_CREDENTIALS',
        usernameVariable: 'NM_JIRA_USER',
        passwordVariable: 'NM_JIRA_PWD']]) {
                sh "curl -u $NM_JIRA_USER:$NM_JIRA_PWD -H \"Content-Type: application/json\" -X PUT https://jira.mysixthday.com/rest/api/2/issue/${git_commit} --data '{\"update\": {\"fixVersions\": [{\"set\": [{\"name\": \"${fixVersion}\"}]}]}}'"
        }   
}
def getFixVersion() {
    def dateFormat = new java.text.SimpleDateFormat("yy.M.W")
    def date = new Date().with {
        d -> d + (7 + Calendar.MONDAY - d[Calendar.DAY_OF_WEEK])%7
    }
    dateFormat.format(date)
}

node('stofro') {
    def sonar_branch_properties = ' -Dsonar.projectName=navigation-service-pr -Dsonar.projectKey=navigation-service-PR'

    step([$class: 'StashNotifier'])
    try {
        def job_timeout = 60
        def timeout_unit = 'MINUTES'

        timeout(time: job_timeout, unit: timeout_unit) {
            currentBuild.result = 'SUCCESS'

            timestamps {
                stage('Checkout, Build, and Test App Artifact') {
                    checkout scm
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'PACTBROKER_CREDENTIALS',\
                                              usernameVariable: 'PACTBROKER_USER', passwordVariable: 'PACTBROKER_PASSWORD']]) {
                    withSonarQubeEnv('sixthday SonarQube Server') {
                        sh "./gradlew clean jacocoTestReport serviceTest providerContractTest ${shouldPublishPacts ? 'publishPactFiles' : 'consumerContractTest'} ${shouldRunSonar ? 'sonarqube' : 'test'} dockerTestLocalImage \
                            -PbuildInfo=true \
                            -Pbuild.job.name=${JOB_NAME} \
                            -Pbuild.job.number=${BUILD_NUMBER} \
                            -Pimage.name=${image_name} \
                            -PpactBrokerUserName=${PACTBROKER_USER} \
                            -PpactBrokerPassword=${PACTBROKER_PASSWORD} \
                            ${isBranchBuild ? sonar_branch_properties : ''}"
                    }
                    }
                    archiveArtifacts 'build/libs/navigation-service-0.0.1-SNAPSHOT-app.jar'
                }

                stage('Validate SonarQube QualityGate') {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SONAR_HOST_AND_TOKEN',
                                              usernameVariable: 'SONAR_HOST_URL', passwordVariable: 'SONAR_AUTH_TOKEN']]) {
                        sh "./read_sonar_qube_status.sh $SONAR_HOST_URL ${isBranchBuild ? 'navigation-service-PR' : 'navigation-service'}"
                    }
                }

                stage('OWASP Dependency Check') {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ARTIFACTORY_API_CREDENTIALS_READ_ONLY',
                                      usernameVariable: 'ARTIFACTORY_API_USER', passwordVariable: 'ARTIFACTORY_API_KEY']]) {
                        sh './gradlew dependencyCheckAnalyze'
                    }
                }

                stage('Build Deployment Artifact') {
                    sh "./gradlew dockerBuildDeployment -Pimage.name=${image_name}"
                }

                if (shouldPushImage) {
                    stage('Tag "(build)" Docker image') {
                        tag_and_push_docker_image_to_ECR(BUILD_NUMBER)
                    }
                    lock("Stages-CreateAndDeployService_dev") {
                        deploy('dev', true, image_name)

                        stage('Index Elasticsearch') {
                            EXIT_CODE = sh script: 'docker-compose -f dev-setup/docker-push-data-to-dev.yml up', returnStatus: true
                            if (EXIT_CODE > 0) {
                                error('Failed to index data into DEV elasticsearch')
                            }
                        }
                    }

                    stage('Tag "bronze" Docker image') {
                        tag_and_push_docker_image_to_ECR('bronze')
                        tag_and_push_docker_image_to_ECR("${BUILD_NUMBER}-bronze")
                    }
                }

                stage('Integration test') {
                    // sh './gradlew -Dspring.profiles.active=dev -Dspring.cloud.vault.token=$(aws s3 cp s3://nm-vault/nm/dev/access_token.txt -) integrationTest'
                }

                stage('Test integration with dev-int') {
                    sh "./gradlew dockerTestImage --imageTag ${image_name} --env dev-int --envVersionName dev-int --buildNumber ${BUILD_NUMBER}"
                }

                if(shouldDeploy) {
                    deploy('dev-int', true, image_name)
                }

                if(shouldRunPerformanceTests) {
                    stage('Run Performance Tests') {
                        sh 'cd performance && SCALA_ENV=devInt sbt gatling:test && cd -'
                        gatlingArchive()
                    }
                }

                if(shouldTagSilver) {
                    stage('Tag "silver" Docker image') {
                        tag_and_push_docker_image_to_ECR('silver')
                    }
                }
            }
        }
        update_jira_fix_version()
    } catch (error) {
        currentBuild.result = 'FAILED'
        if (!isBranchBuild) {
            slackSend channel: "${searchNavChannel}", color: "${red}", message: "Build ${env.BUILD_NUMBER} FAILED for ${slackMsgPipelineLink}.  (${slackMsgConsoleLink})"
        }

        throw error
    } finally {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports/tests/test/',
                reportFiles          : 'index.html',
                reportName           : 'Unit Test Report'
        ])
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports/tests/serviceTest/',
                reportFiles          : 'index.html',
                reportName           : 'Service Test Report'
        ])
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports/tests/consumerContractTest',
                reportFiles          : 'index.html',
                reportName           : 'Consumer Contract test report'
        ])
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports/tests/providerContractTest',
                reportFiles          : 'index.html',
                reportName           : 'Provider Contract test report'
        ])
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports/jacoco/test/html',
                reportFiles          : 'index.html',
                reportName           : 'Code coverage report'
        ])
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports/tests/integrationTest/',
                reportFiles          : 'index.html',
                reportName           : 'Integration Test Report'
        ])
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : 'build/reports',
                reportFiles          : 'dependency-check-report.html',
                reportName           : 'Dependency check report'
        ])
        step([$class: 'StashNotifier'])
    }
}
