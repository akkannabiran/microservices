import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        ELASTICSEARCH_VERSION = '6.6.0'
        springBootVersion = '1.5.16.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "http://jcenter.bintray.com"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'application'
    id 'eclipse'
    id 'java'
    id 'org.sonarqube' version '2.6.1'
    id 'idea'
    id "com.gorylenko.gradle-git-properties" version "1.4.16"
    id 'jacoco'
    id 'org.owasp.dependencycheck' version "3.0.2"
    id "nebula.dependency-lock" version "4.9.5"
    id "au.com.dius.pact" version "3.5.12"

}

ext.ecr_repo_name = "navigation-batch-service"

repositories {
    mavenCentral()
    maven {
        url "http://jcenter.bintray.com"
    }
}

apply from: 'gradle/deploy.gradle'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
jar.baseName = 'navigation-batch-service'
mainClassName = 'com.sixthday.navigation.NavigationBatchApplication'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyLock {
    includeTransitives = true
}

// Only use global locks to prevent mismatches in sub-projects
tasks.removeAll tasks['deleteLock'], tasks['generateLock'], tasks['saveLock'], tasks['updateLock']

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE"
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

sourceSets {
    test {
        java.srcDirs = ['src/test/unitTest/java']
        resources.srcDirs = ['src/test/unitTest/resources']
    }

    consumerContractTest {
        java.srcDirs = ['src/test/contractTest/consumer/java']
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }

    providerContractTest {
        java.srcDirs = ['src/test/contractTest/provider/java']
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }

    integrationTest {
        java.srcDirs = ['src/test/integrationTest/java']
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.projectlombok:lombok'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.cloud:spring-cloud-starter-consul-config'
    compile 'org.owasp:dependency-check-gradle:3.0.2'
    compile 'org.springframework.boot:spring-boot-configuration-processor'

    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'com.lmax:disruptor:3.3.6'

    compile 'org.apache.httpcomponents:httpclient'

    //DynamoDB Dependencies
    compile('com.github.derjust:spring-data-dynamodb:4.5.7')

    //ElasticSearch Dependencies
    compile("org.elasticsearch:elasticsearch:${ELASTICSEARCH_VERSION}")
    compile("org.elasticsearch.client:elasticsearch-rest-high-level-client:${ELASTICSEARCH_VERSION}")

    //rabbitmq dependencies
    compile("org.springframework.boot:spring-boot-starter-amqp")

    //vault dependencies
    compile("org.springframework.cloud:spring-cloud-starter-vault-config")

    //consul client
    compile('com.orbitz.consul:consul-client:1.1.0')
    compile('com.squareup.okhttp3:okhttp:3.9.0') { force = true }
    compile('com.google.guava:guava:22.0') { force = true }

    // amazon dependencies
    compile('com.amazonaws:aws-java-sdk-s3')

    //json parsers
    compile('com.googlecode.json-simple:json-simple:1.1.1') { force = true }

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.jayway.restassured:rest-assured:2.9.+'
    testCompile 'com.jayway.jsonpath:json-path-assert:2.2.+'

    //pact
    testCompile('au.com.dius:pact-jvm-provider-junit_2.12:3.5.12')
    testCompile('au.com.dius:pact-jvm-provider-spring_2.12:3.5.12')
    testCompile('au.com.dius:pact-jvm-consumer-junit_2.12:3.5.12')
    testCompile('au.com.dius:pact-jvm-provider-gradle_2.12:3.5.12')

    //to set environment variable
    testCompile('com.github.stefanbirkner:system-rules:1.17.0')

    //Mockserver
    testCompile('org.mock-server:mockserver-netty:3.9.1')

    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    testCompile('org.powermock:powermock-api-mockito:1.7.0')
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile('nl.jqno.equalsverifier:equalsverifier:3.1.8')
}

sonarqube {
    properties {
        property 'sonar.projectName', 'navigation-batch-service'
        property 'sonar.projectKey', 'navigation-batch-service'
        property "sonar.exclusions", "**/AmazonS3ClientUtil.java,**/com/sixthday/model/serializable/designerindex/*.java,**/com/sixthday/navigation/toggles/Features.java"
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    providerContractTestCompile.extendsFrom testCompile
    providerContractTestCompile.extendsFrom testRuntime

    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: 'logback-classic'
}

dependencyCheck {
    failBuildOnCVSS 7
    suppressionFile file('dependency-suppression.xml').toString()
}

task integrationTest(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    classpath = sourceSets.integrationTest.runtimeClasspath
    testClassesDir = sourceSets.integrationTest.output.classesDir
}

integrationTest {
    systemProperties = System.properties
}

jacocoTestReport {
    reports {
        html {
            enabled true
        }
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        })
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

task sonarFailure {
    doLast {
        throw new GradleException('SonarQube verification failed')
    }
}

tasks.withType(Test).each {
    it.testLogging {
        exceptionFormat = "full"
        showStackTraces = false
    }
}

final PACT_BROKER_PROTOCOL = "https"
final PACT_BROKER_ARTIFACTORY_URL = 'uswest2-dev-global-pact.sixthdaycloudapps.com'

if (System.getenv('PACT_BROKER_ARTIFACTORY_URL') != null) {
    PACT_BROKER_ARTIFACTORY_URL = System.getenv('PACT_BROKER_ARTIFACTORY_URL')
}

task consumerContractTest(type: Test) {
    description = "Runs Consumer Contract Tests"
    testClassesDir = sourceSets.consumerContractTest.output.classesDir
    classpath += sourceSets.consumerContractTest.compileClasspath
    classpath += sourceSets.consumerContractTest.runtimeClasspath
    systemProperties['pact.rootDir'] = "$buildDir/pacts"

    testLogging {
        exceptionFormat = "full"
        showStackTraces = true
    }
}

task providerContractTest(type: Test, description: 'Runs the provider contract tests.') {
    final username = project.hasProperty('pactBrokerUserName') ? project.pactBrokerUserName : ''
    final password = project.hasProperty('pactBrokerPassword') ? project.pactBrokerPassword : ''
    final defaultHttpsPort = "443"

    systemProperty 'pactbroker.username', username
    systemProperty 'pactbroker.password', password
    systemProperty 'pactbroker.hostname', PACT_BROKER_ARTIFACTORY_URL
    systemProperty 'pactbroker.protocol', PACT_BROKER_PROTOCOL
    systemProperty 'pactbroker.port', defaultHttpsPort
    testClassesDir = sourceSets.providerContractTest.output.classesDir
    classpath += sourceSets.providerContractTest.compileClasspath
    classpath += sourceSets.providerContractTest.runtimeClasspath
}

pact {
    // Called with task 'pactPublish'
    publish {
        final username = project.hasProperty('pactBrokerUserName') ? project.pactBrokerUserName : ''
        final password = project.hasProperty('pactBrokerPassword') ? project.pactBrokerPassword : ''
        //pactBrokerDir defaults to $buildDir/pacts
        //pactBrokerUrl = "$PACT_BROKER_PROTOCOL://$username:$password@$PACT_BROKER_ARTIFACTORY_URL"
        pactBrokerUrl = "$PACT_BROKER_PROTOCOL://$PACT_BROKER_ARTIFACTORY_URL"
    }
}

task publishPactFiles {
    dependsOn consumerContractTest
    dependsOn pactPublish
}

def springProfilesActive = findProperty('spring.profiles.active') ?: 'local'

bootRun {
    args = ["--spring.profiles.active=$springProfilesActive", "-Xms1536m", "-Xmx1536m"]
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=28787", "-Xms1536m", "-Xmx1536m"]
}

def includeBuildInfo = findProperty('buildInfo') ?: false

springBoot {
    buildInfo {
        if (includeBuildInfo) {
            additionalProperties = [
                    time: buildTime()
            ]
        }
    }
}

bootRepackage {
    classifier = 'app'
}

gitProperties {
    dateFormat = "yyyy-MM-dd  HH:mm:ss z"
    dateFormatTimeZone = 'CST'
}

task sonarCheck(type: Exec) {
    commandLine './run_sonar_build_local.sh'
}

def buildTime() {
    final dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z")
    def localSystemTime = dateFormat.format(new java.util.Date())
    def jenkinsBuildTime = System.getenv('BUILD_TIMESTAMP')
    Date date = dateFormat.parse(jenkinsBuildTime ? jenkinsBuildTime : localSystemTime);
    dateFormat.timeZone = TimeZone.getTimeZone('America/Chicago')
    dateFormat.format(date)
}

def jobName = findProperty('build.job.name') ?: 'local'
def jobNumber = findProperty('build.job.number') ?: 'local'

processResources {
    inputs.property('jobName', jobName)
    inputs.property('jobNumber', jobNumber)

    filter ReplaceTokens, tokens: [
            'jenkins.job.name'    : jobName,
            'jenkins.build.number': jobNumber
    ]
}

run { systemProperties = System.properties }

task dockerTestImage(type: TestDockerImage) {
    imageName = project.ext.aws_repo_url
}

task dockerValidateImage(type: ValidateDockerImage) {
    imageName = project.ext.aws_repo_url
}